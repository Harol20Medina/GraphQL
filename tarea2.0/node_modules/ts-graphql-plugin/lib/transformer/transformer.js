"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransformer = void 0;
const typescript_1 = __importDefault(require("typescript"));
const graphql_1 = require("graphql");
const ts_ast_util_1 = require("../ts-ast-util");
function toObjectNode(field) {
    if (field === null) {
        return ts_ast_util_1.astf.createNull();
    }
    else if (typeof field === 'boolean') {
        return field ? ts_ast_util_1.astf.createTrue() : ts_ast_util_1.astf.createFalse();
    }
    else if (typeof field === 'number') {
        return ts_ast_util_1.astf.createNumericLiteral(field + '');
    }
    else if (typeof field === 'string') {
        return ts_ast_util_1.astf.createStringLiteral(field);
    }
    else if (Array.isArray(field)) {
        return ts_ast_util_1.astf.createArrayLiteralExpression(field.map(item => toObjectNode(item)));
    }
    return ts_ast_util_1.astf.createObjectLiteralExpression(Object.entries(field)
        .filter(([k, v]) => k !== 'loc' && v !== undefined)
        .map(([k, v]) => ts_ast_util_1.astf.createPropertyAssignment(ts_ast_util_1.astf.createIdentifier(k), toObjectNode(v))), true);
}
function getTransformer({ tag, target, getDocumentNode, removeFragmentDefinitions, documentTransformers, getEnabled, }) {
    return (ctx) => {
        const visit = (node) => {
            if (!getEnabled())
                return node;
            let templateNode = undefined;
            if (tag && typescript_1.default.isImportDeclaration(node)) {
                return (0, ts_ast_util_1.removeAliasFromImportDeclaration)(node, tag);
            }
            if (typescript_1.default.isTaggedTemplateExpression(node) && (!tag || (0, ts_ast_util_1.hasTagged)(node, tag))) {
                templateNode = node.template;
            }
            else if (!tag && typescript_1.default.isNoSubstitutionTemplateLiteral(node)) {
                templateNode = node;
            }
            else if (!tag && typescript_1.default.isTemplateExpression(node)) {
                templateNode = node;
            }
            if (!templateNode)
                return typescript_1.default.visitEachChild(node, visit, ctx);
            const originalDocumentNode = getDocumentNode(templateNode);
            if (!originalDocumentNode)
                return typescript_1.default.visitEachChild(node, visit, ctx);
            const documentNode = documentTransformers.reduce((doc, dt) => dt(doc), originalDocumentNode);
            if (!documentNode)
                return typescript_1.default.visitEachChild(node, visit, ctx);
            const toBeRemoved = removeFragmentDefinitions && documentNode.definitions.every(def => def.kind === 'FragmentDefinition');
            if (target === 'text') {
                if (toBeRemoved)
                    return ts_ast_util_1.astf.createStringLiteral('');
                return ts_ast_util_1.astf.createStringLiteral((0, graphql_1.print)(documentNode));
            }
            if (toBeRemoved)
                return ts_ast_util_1.astf.createNumericLiteral('0');
            return toObjectNode(documentNode);
        };
        return (sourceFile) => typescript_1.default.visitEachChild(sourceFile, visit, ctx);
    };
}
exports.getTransformer = getTransformer;
//# sourceMappingURL=transformer.js.map