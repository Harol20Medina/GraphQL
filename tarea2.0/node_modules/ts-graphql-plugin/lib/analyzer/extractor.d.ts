import ts from 'typescript';
import { DocumentNode, GraphQLError } from 'graphql';
import { ScriptSourceHelper, ResolvedTemplateInfo } from '../ts-ast-util';
import { ManifestOutput, OperationType } from './types';
import { ErrorWithLocation } from '../errors';
export type ExtractorOptions = {
    removeDuplicatedFragments: boolean;
    scriptSourceHelper: ScriptSourceHelper;
    debug: (msg: string) => void;
};
export type ExtractTemplateResolveErrorResult = {
    fileName: string;
    templateNode: ts.NoSubstitutionTemplateLiteral | ts.TemplateExpression;
    resolveTemplateError: {
        message: string;
        start: number;
        end: number;
    };
    documentNode: undefined;
    resolevedTemplateInfo: undefined;
    graphqlError: undefined;
};
export type ExtractGraphQLErrorResult = {
    fileName: string;
    templateNode: ts.NoSubstitutionTemplateLiteral | ts.TemplateExpression;
    resolevedTemplateInfo: ResolvedTemplateInfo;
    resolveTemplateError: undefined;
    graphqlError: GraphQLError;
    resolveTemplateErrorMessage: undefined;
    documentNode: undefined;
};
export type ExtractSucceededResult = {
    fileName: string;
    templateNode: ts.NoSubstitutionTemplateLiteral | ts.TemplateExpression;
    documentNode: DocumentNode;
    resolevedTemplateInfo: ResolvedTemplateInfo;
    resolveTemplateError: undefined;
    graphqlError: undefined;
    resolveTemplateErrorMessage: undefined;
};
export type ExtractResult = ExtractTemplateResolveErrorResult | ExtractGraphQLErrorResult | ExtractSucceededResult;
export declare class Extractor {
    private readonly _removeDuplicatedFragments;
    private readonly _helper;
    private readonly _debug;
    constructor({ debug, removeDuplicatedFragments, scriptSourceHelper }: ExtractorOptions);
    extract(files: string[], tagName?: string): ExtractResult[];
    pickupErrors(extractResults: ExtractResult[], { ignoreGraphQLError }?: {
        ignoreGraphQLError: boolean;
    }): ErrorWithLocation[];
    getDominantDefinition(result: ExtractSucceededResult): {
        type: OperationType | undefined;
        operationName: string | undefined;
        fragmentName: string;
    };
    toManifest(extractResults: ExtractResult[], tagName?: string): ManifestOutput;
}
